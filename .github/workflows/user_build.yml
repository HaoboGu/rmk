name: Build firmware according to user config file

on:
  workflow_call:
    inputs:
      keyboard_toml_path:
        description: "Path to the keyboard.toml"
        default: "keyboard.toml"
        required: false
        type: string
      vial_json_path:
        description: "Path to the vial.json"
        default: "vial.json"
        required: false
        type: string

jobs:
  get_chip_name:
    runs-on: ubuntu-latest
    outputs:
      chip_name: ${{ steps.capture.outputs.chip_name }}
    steps:
      - uses: cargo-bins/cargo-binstall@main
      - uses: actions/checkout@v3
      - name: Install libssl
        run: wget http://nz2.archive.ubuntu.com/ubuntu/pool/main/o/openssl/libssl1.1_1.1.1f-1ubuntu2_amd64.deb && sudo dpkg -i libssl1.1_1.1.1f-1ubuntu2_amd64.deb
      - name: Install rmkit 
        run: cargo binstall rmkit -y
      - name: Get chip name
        id: capture
        run: |
          # Run rmkit command to get the chip name
          OUTPUT=$(rmkit get-chip --keyboard-toml-path ${{ inputs.keyboard_toml_path }})

          # Print the output to confirm
          echo "Command output: $OUTPUT"

          # Save the output as a GitHub Actions output variable
          echo "chip_name=$OUTPUT" >> $GITHUB_OUTPUT

  build:
    runs-on: ubuntu-latest
    needs: get_chip_name
    if: needs.get_chip_name.outputs.chip_name != 'esp32s3'
    steps:
      - uses: cargo-bins/cargo-binstall@main
      - uses: actions/checkout@v3
      - name: Install libssl
        run: wget http://nz2.archive.ubuntu.com/ubuntu/pool/main/o/openssl/libssl1.1_1.1.1f-1ubuntu2_amd64.deb && sudo dpkg -i libssl1.1_1.1.1f-1ubuntu2_amd64.deb
      - name: Install rmkit, flip-link and cargo-make
        run: cargo binstall cargo-make rmkit flip-link -y
      - name: Create firmware project
        working-directory: .
        run: rmkit create --keyboard-toml-path ${{ inputs.keyboard_toml_path }} --vial-json-path ${{ inputs.vial_json_path }} --target-dir rmk
      - name: Build firmware
        working-directory: ./rmk
        run: cargo build --release
      - name: Build uf2 firmware
        working-directory: ./rmk
        run: cargo make uf2 --release
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: firmware_uf2
          path: rmk/*.uf2
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: firmware_hex
          path: rmk/*.hex
  build_esp:
    runs-on: ubuntu-latest
    needs: get_chip_name
    if: needs.get_chip_name.outputs.chip_name == 'esp32s3'
    steps:
      - uses: cargo-bins/cargo-binstall@main
      - uses: actions/checkout@v3
      - name: Install libssl
        run: wget http://nz2.archive.ubuntu.com/ubuntu/pool/main/o/openssl/libssl1.1_1.1.1f-1ubuntu2_amd64.deb && sudo dpkg -i libssl1.1_1.1.1f-1ubuntu2_amd64.deb
      - name: Install rmkit, espflash and espup
        run: cargo binstall rmkit espflash espup -y
      - name: Prepare esp environment
        run: espup install
      - name: Create firmware project
        working-directory: .
        run: rmkit create --keyboard-toml-path ${{ inputs.keyboard_toml_path }} --vial-json-path ${{ inputs.vial_json_path }} --target-dir rmk
      - name: Build firmware for esp32
        working-directory: ./rmk
        run: . /home/runner/export-esp.sh && cargo +esp build --release 
      - name: Get target arch
        id: arch
        run: |
          if [ "${{ needs.get_chip_name.outputs.chip_name }}" == "esp32c3" ]; then
            ARCH="riscv32imc-unknown-none-elf"
          elif [ "${{ needs.get_chip_name.outputs.chip_name }}" == "esp32s3" ]; then
            ARCH="xtensa-esp32s3-none-elf"
          elif [ "${{ needs.get_chip_name.outputs.chip_name }}" == "esp32c6" ]; then
            ARCH="riscv32imac-unknown-none-elf"
          else
            ARCH=""
          fi
          # Save the arch as a GitHub Actions output variable
          echo "arch=$ARCH" >> $GITHUB_OUTPUT
      - name: Get project name
        id: project_name
        run: |
          # Run rmkit command to get the chip name
          OUTPUT=$(rmkit get-project-name --keyboard-toml-path ${{ inputs.keyboard_toml_path }})

          # Print the output to confirm
          echo "Command output: $OUTPUT"

          # Save the output as a GitHub Actions output variable
          echo "project_name=$OUTPUT" >> $GITHUB_OUTPUT
      - name: convert firmware to bin
        working-directory: ./rmk
        run: espflash save-image --chip ${{ needs.get_chip_name.outputs.chip_name }} target/${{ steps.arch.outputs.arch }}/release/${{ steps.project_name.outputs.project_name }} ./rmk.bin
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: firmware_bin
          path: rmk/*.bin

