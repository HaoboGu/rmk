[package]
name = "rmk"
version = "0.6.1"
authors = ["Haobo Gu <haobogu@outlook.com>"]
description = "Keyboard firmware written in Rust"
homepage = "https://github.com/haobogu/rmk"
repository = "https://github.com/haobogu/rmk"
readme = "../README.md"
edition = "2021"
license = "MIT OR Apache-2.0"
resolver = "2"

[dependencies]
rmk-macro = { version = "=0.5.1", path = "../rmk-macro" }
embedded-hal = { version = "1.0.0" }
embedded-hal-async = { version = "1.0.0", optional = true }
embedded-io-async = { version = "0.6" }
embedded-storage = { version = "0.3", optional = true }
embedded-storage-async = { version = "0.4", optional = true }

embassy-embedded-hal = { version = "0.3" }
embassy-time = { version = "0.4" }
embassy-usb = { version = "0.4", features = [
    "usbd-hid",
    "max-interface-count-8",
    "max-handler-count-8",
] }
embassy-sync = { version = "0.6" }
embassy-futures = { version = "0.1" }
embassy-executor = { version = "0.7" }

futures = { version = "0.3", default-features = false, features = [
    "async-await",
] }

heapless = "0.8.0"
usbd-hid = "0.8.2"
bitfield-struct = "0.10"
static_cell = "2"
sequential-storage = "4.0.1"

defmt = { version = "1.0", optional = true }
log = { version = "0.4", optional = true }
num_enum = { version = "0.7", default-features = false }
byteorder = { version = "1", default-features = false }
ssmarshal = { version = "1.0", default-features = false }
serde = { version = "1", default-features = false, features = ["derive"] }
postcard = { version = "1", features = ["experimental-derive"] }

# Used in macro
paste = "1"

# Optional dependencies
# BLE dependencies
trouble-host = { version = "0.1.0", git = "https://github.com/embassy-rs/trouble", rev = "7d72e8d", features = [
    "gatt",
    "scan",
    "derive",
    "security",
    "default-packet-pool-mtu-255",
    "default-packet-pool-size-32",
], optional = true }
rand_core = { version = "0.6", optional = true }
bt-hci = { version = "0.3", optional = true }

# nRF dependencies
embassy-nrf = { version = "0.3.1", features = [
    "unstable-pac",
    "time",
], optional = true }

# RP2040 dependencies
embassy-rp = { version = "0.4", optional = true }
embassy-hal-internal = { version = "0.2.0", optional = true }
rp-pac = { version = "7.0.0", optional = true }
pio = { version = "0.3.0", optional = true }
fixed = { version = "1.28.0", optional = true }

# ESP32 dependencies
esp-hal = { version = "1.0.0-beta.0", optional = true }

# Document feature
document-features = "0.2"

# Used in testing
critical-section = { version = "1.2", optional = true }

[dev-dependencies]
# A hack for enabling 'std' feature in testing, ref: https://github.com/rust-lang/cargo/issues/2911
rmk = { path = ".", default-features = false, features = ["std", "log"] }
env_logger = "0.11"
ctor = "0.4.1"
rusty-fork = "0.3.0"

[build-dependencies]
rmk-config = { path = "../rmk-config", version = "=0.3.0"}
toml = "0.8"
serde = "1.0"
serde_derive = "1.0"
chrono = "0.4"
crc32fast = "1.3"
const-gen = "1.6"

[package.metadata.docs.rs]
features = ["split"]

# Architecture specific dependencies
[target.'cfg(all(target_arch = "arm", target_os = "none"))'.dependencies]
cortex-m = { version = "0.7" }

[features]
default = ["col2row", "defmt", "storage"]

## the storage is optional to save memory
storage = ["dep:embedded-storage", "dep:embedded-storage-async"]

## If your PCB diode's direction is col2row, enable this feature. If it's row2col, disable this feature by `default-features = false`.
col2row = []

## Enable defmt feature
defmt = [
    "dep:defmt",
    "embedded-hal/defmt-03",
    "embedded-hal-async?/defmt-03",
    "embedded-io-async/defmt-03",
    "embassy-time/defmt",
    "embassy-usb/defmt",
    "embassy-sync/defmt",
    "embassy-futures/defmt",
    "embassy-executor/defmt",
    "usbd-hid/defmt",
    "sequential-storage/defmt-03",
    "embassy-nrf?/defmt",
    "postcard/use-defmt",
    "trouble-host?/defmt",
    "bt-hci?/defmt",
    "heapless/defmt-03",
]

log = ["dep:log", "trouble-host?/log"]

## Add std feature for testing
std = [
    "embassy-executor/arch-std",
    "embassy-executor/executor-thread",
    "embassy-executor/task-arena-size-32768",
    "embassy-time/std",
    "embassy-time/generic-queue-128",
    "critical-section?/std",
]

## Enable async matrix scan
async_matrix = ["dep:embedded-hal-async"]

## Use rapid debouncer
rapid_debouncer = []

## Feature for split keyboard
split = []

## Internal feature that indicates no USB is used, this feature will be auto-activated for some chips
_no_usb = []

#! ### BLE feature flags
#!
#! ⚠️ Due to the limitation of docs.rs, functions gated by BLE features won't show in docs.rs. You have to head to [`examples`](https://github.com/HaoboGu/rmk/tree/main/examples) folder of RMK repo for their usages.
## Enable feature if you want to use nRF52840 with BLE.
nrf52840_ble = ["_nrf_ble"]
## Enable feature if you want to use nRF52833 with BLE.
nrf52833_ble = ["_nrf_ble"]
## Enable feature if you want to use nRF52832 with BLE.
nrf52832_ble = ["_nrf_ble", "_no_usb"]
## Enable feature if you want to use nRF52811 with BLE.
nrf52811_ble = ["_nrf_ble", "_no_usb"]
## Enable feature if you want to use nRF52810 with BLE.
nrf52810_ble = ["_nrf_ble", "_no_usb"]
_nrf_ble = ["_ble", "dep:embassy-nrf"]

## Enable feature if you want to use ESP32C3 with BLE.
esp32c3_ble = ["_esp_ble", "_no_usb"]
## Enable feature if you want to use ESP32C6 with BLE.
esp32c6_ble = ["_esp_ble", "_no_usb"]
## Enable feature if you want to use ESP32S3 with BLE.
esp32s3_ble = ["_esp_ble"]
_esp_ble = ["_ble", "dep:esp-hal"]

## Enable feature if you want to use trouble BLE stack
_ble = ["dep:trouble-host", "dep:rand_core", "dep:bt-hci"]

## Enable feature if you want to use RP2040 PIO UART
rp2040_pio = [
    "dep:embassy-rp",
    "dep:embassy-hal-internal",
    "dep:rp-pac",
    "dep:pio",
    "dep:fixed",
]

## Enable feature if you want rp2040 bootloader jumping key
rp2040_bl = ["dep:embassy-rp"]

## Enable feature if you're using Adafruit nRF52 bootloader and want bootloader jumping key
adafruit_bl = ["_nrf_ble"]

[lib]
# Don't run doctest for lib
doctest = false
