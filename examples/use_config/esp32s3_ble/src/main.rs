#![no_std]
#![no_main]

use rmk::macros::rmk_keyboard;

// Vial config is automatically generated by `build.rs`, according to `vial.json`
// Please put `vial.json` at your project's root
#[rmk_keyboard]
mod keyboard {
    #[Override(chip_init)]
    fn chip_init() {
        // FIXME: Remove the temporary initialization code after esp-hal releases the new version
        ::esp_println::logger::init_logger_from_env();
        let p = ::esp_hal::init(::esp_hal::Config::default().with_cpu_clock(::esp_hal::clock::CpuClock::max()));
        ::esp_alloc::heap_allocator!(size: 72 * 1024);
        let timg0 = ::esp_hal::timer::timg::TimerGroup::new(p.TIMG0);
        let _trng_source = ::esp_hal::rng::TrngSource::new(p.RNG, p.ADC1);
        let mut rng = ::esp_hal::rng::Trng::try_new().unwrap();
        let init = ::esp_wifi::init(timg0.timer0).unwrap();
        let systimer = ::esp_hal::timer::systimer::SystemTimer::new(p.SYSTIMER);
        ::esp_hal_embassy::init(systimer.alarm0);
        let bluetooth = p.BT;
        let connector = ::esp_wifi::ble::controller::BleConnector::new(&init, bluetooth);
        let controller: ::bt_hci::controller::ExternalController<_, 64> =
            ::bt_hci::controller::ExternalController::new(connector);
        let ble_addr = [0x18, 0xe2, 0x21, 0x80, 0xc0, 0xc7];
        let mut host_resources = ::rmk::HostResources::new();
        let stack = ::rmk::ble::build_ble_stack(controller, ble_addr, &mut rng, &mut host_resources).await;
    }
}
